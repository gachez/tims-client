{"ast":null,"code":"var _jsxFileName = \"/home/gachez/EnterpriseSystems/tims-client/src/index/App/UserDashboard/TasksViewUser.js\";\nimport React from 'react';\nimport '../shared/TaskView.css';\nimport { Nav, Modal, Button, Form, ListGroup, Spinner } from 'react-bootstrap';\nimport axios from 'axios';\nimport users from '../shared/open-menu.png';\nexport default class TaskViewUser extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoaded: false,\n      modalDisplay: 'none',\n      taskDueNavColor: '#dc3545',\n      taskDueNavBg: '#FFF',\n      taskCompleteNavcolor: '#28a745',\n      taskCompleteNavBg: '#FFF',\n      markCompleteClicked: false,\n      tasks: [],\n      nav: '',\n      taskAss: '',\n      taskID: '',\n      projectName: 'Medic Project',\n      dueDate: 'Fri 12 May',\n      taskDescription: 'Please fill 100 entries for the above project under the category healthcare. Thanks'\n    };\n\n    this.toggleDeleteModal = () => {\n      this.state.deleteModalDisplay === 'none' ? this.setState({\n        deleteModalDisplay: 'block'\n      }) : this.setState({\n        deleteModalDisplay: 'none'\n      });\n    };\n\n    this.toggleModalDisplay = () => {\n      this.state.modalDisplay === 'none' ? this.setState({\n        modalDisplay: 'block'\n      }) : this.setState({\n        modalDisplay: 'none'\n      });\n    };\n\n    this.markComplete = id => {\n      axios.post(\"/api/v1/update_task/\" + id, {\n        complete: true\n      }, {\n        headers: {\n          'auth-token': `${localStorage.getItem('auth-token')}`\n        }\n      }).then(res => {\n        alert(\"Succesfully marked task as complete\");\n        this.setState({\n          markCompleteClicked: false,\n          modalDisplay: 'none'\n        });\n        this.reloadPage();\n      }).catch(err => console.log('sorry' + err));\n    };\n\n    this.reloadPage = () => {\n      window.location.reload();\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"/api/v1/admin/assigned_tasks\", {\n      headers: {\n        'auth-token': `${localStorage.getItem('auth-token')}`\n      }\n    }).then(res => {\n      this.setState({\n        isLoaded: true,\n        tasks: res.data\n      });\n    });\n    localStorage.setItem(\"page\", \"tasks\");\n  }\n\n  render() {\n    if (this.state.isLoaded) {\n      const loader = /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        as: \"span\",\n        animation: \"border\",\n        size: \"sm\",\n        role: \"status\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"sr-only\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 41\n        }\n      }, \"Loading...\"));\n      const markCompleteBtn = /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        onClick: () => {\n          this.setState({\n            markCompleteClicked: true\n          });\n          this.markComplete(this.state.taskAss);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 37\n        }\n      }, \"Mark Complete\");\n      const tasksList = this.props.userTasks.filter(task => task.userAssigned === this.props.userLoggedIn);\n      const completeTasks = tasksList.filter(task => task.complete);\n      const dueTasks = tasksList.filter(task => !task.complete);\n\n      const determineList = () => {\n        switch (this.state.nav) {\n          case 'tasksdue':\n            return dueTasks;\n\n          case 'completeTasks':\n            return completeTasks;\n\n          default:\n            return tasksList;\n        }\n      };\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modal-bg\",\n        style: {\n          display: this.state.modalDisplay\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Dialog, {\n        className: \"modal-add-user\",\n        style: {\n          display: this.state.modalDisplay\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 33\n        }\n      }, this.state.projectName)), /*#__PURE__*/React.createElement(Modal.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 37\n        }\n      }, \"Due Date: \"), this.state.dueDate), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 33\n        }\n      }, this.state.taskDescription)), /*#__PURE__*/React.createElement(Modal.Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"secondary\",\n        onClick: this.toggleModalDisplay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 33\n        }\n      }, \"Close\"), !this.state.markCompleteClicked ? markCompleteBtn : loader))), /*#__PURE__*/React.createElement(\"h2\", {\n        id: \"h2-title\",\n        style: {\n          position: 'relative',\n          top: '20px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }\n      }, \"Tasks Management\"), /*#__PURE__*/React.createElement(Nav, {\n        variant: \"pills\",\n        defaultActiveKey: \"#\",\n        className: \"navigation-tab-menu\",\n        style: {\n          position: 'absolute',\n          left: 0,\n          top: '150px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Item, {\n        className: \"user-tasks-nav\",\n        onClick: () => {\n          this.setState({\n            taskDueNavBg: \"#FFF\",\n            taskDueNavColor: '#dc3545',\n            taskCompleteNavBg: '#FFF',\n            taskCompleteNavcolor: '#28a745',\n            nav: \"\"\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        href: \"#\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 33\n        }\n      }, \"Assigned Tasks List\")), /*#__PURE__*/React.createElement(Nav.Item, {\n        className: \"user-tasks-nav\",\n        style: {\n          cursor: 'pointer',\n          border: 'solid 1px #dc3545',\n          color: this.state.taskDueNavColor,\n          background: this.state.taskDueNavBg,\n          borderRadius: '9px',\n          padding: '.5rem .5rem',\n          marginLeft: '1rem'\n        },\n        onClick: () => {\n          this.setState({\n            taskDueNavColor: 'white',\n            taskDueNavBg: '#dc3545',\n            taskCompleteNavBg: '#FFF',\n            taskCompleteNavcolor: '#28a745',\n            nav: 'tasksdue'\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 29\n        }\n      }, \"Tasks Due \", dueTasks.length), /*#__PURE__*/React.createElement(Nav.Item, {\n        className: \"user-tasks-nav\",\n        style: {\n          cursor: 'pointer',\n          border: 'solid 1px #28a745',\n          color: this.state.taskCompleteNavcolor,\n          background: this.state.taskCompleteNavBg,\n          borderRadius: '9px',\n          padding: '.5rem .5rem',\n          marginLeft: '1rem'\n        },\n        onClick: () => {\n          this.setState({\n            taskCompleteNavBg: '#28a745',\n            taskCompleteNavcolor: '#FFF',\n            taskDueNavBg: '#FFF',\n            taskDueNavColor: '#dc3545',\n            nav: \"completeTasks\"\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 29\n        }\n      }, \"Complete Tasks \", completeTasks.length)), /*#__PURE__*/React.createElement(ListGroup, {\n        style: {\n          minWidth: '50%',\n          maxWidth: '70%',\n          marginTop: '14.5%',\n          cursor: 'pointer'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 19\n        }\n      }, determineList().reverse().map(task => {\n        return /*#__PURE__*/React.createElement(ListGroup.Item, {\n          variant: task.complete ? 'success' : 'danger',\n          style: {\n            marginBottom: '16px'\n          },\n          key: task._id,\n          onClick: () => {\n            this.setState({\n              taskAss: task._id,\n              projectName: task.projectName,\n              taskDescription: task.description,\n              dueDate: task.dueDate\n            });\n            this.toggleModalDisplay();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"b\", {\n          style: {\n            width: '65%'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 31\n          }\n        }, task.description), /*#__PURE__*/React.createElement(\"img\", {\n          src: users,\n          alt: \"user avatar\",\n          width: \"24px\",\n          height: \"24px\",\n          style: {\n            position: 'absolute',\n            right: '1.75rem'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 33\n          }\n        }));\n      })));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n        width: '70%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      animation: \"grow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/gachez/EnterpriseSystems/tims-client/src/index/App/UserDashboard/TasksViewUser.js"],"names":["React","Nav","Modal","Button","Form","ListGroup","Spinner","axios","users","TaskViewUser","Component","state","isLoaded","modalDisplay","taskDueNavColor","taskDueNavBg","taskCompleteNavcolor","taskCompleteNavBg","markCompleteClicked","tasks","nav","taskAss","taskID","projectName","dueDate","taskDescription","toggleDeleteModal","deleteModalDisplay","setState","toggleModalDisplay","markComplete","id","post","complete","headers","localStorage","getItem","then","res","alert","reloadPage","catch","err","console","log","window","location","reload","componentDidMount","get","data","setItem","render","loader","markCompleteBtn","tasksList","props","userTasks","filter","task","userAssigned","userLoggedIn","completeTasks","dueTasks","determineList","display","position","top","left","cursor","border","color","background","borderRadius","padding","marginLeft","length","minWidth","maxWidth","marginTop","reverse","map","marginBottom","_id","description","width","right","justifyContent","alignItems","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../shared/TaskView.css';\nimport {Nav, Modal,Button, Form, ListGroup, Spinner } from 'react-bootstrap';\nimport axios from 'axios';\nimport users from '../shared/open-menu.png';\n\n\nexport default class TaskViewUser extends React.Component{\n    state = {\n        isLoaded: false, \n        modalDisplay: 'none',\n        taskDueNavColor: '#dc3545',\n        taskDueNavBg: '#FFF',\n        taskCompleteNavcolor: '#28a745',\n        taskCompleteNavBg: '#FFF',\n        markCompleteClicked: false,\n        tasks: [],\n        nav: '',\n        taskAss: '',\n        taskID: '',\n        projectName: 'Medic Project',\n        dueDate: 'Fri 12 May',\n        taskDescription: 'Please fill 100 entries for the above project under the category healthcare. Thanks'\n    }\n\n    componentDidMount() {\n        axios.get(\"/api/v1/admin/assigned_tasks\",  {\n            headers: {\n              'auth-token': `${localStorage.getItem('auth-token')}`\n            }\n          }).then(res => {\n            this.setState({\n                isLoaded: true,\n                tasks: res.data \n            })\n          });\n\n          localStorage.setItem(\"page\", \"tasks\");\n    }\n\n    toggleDeleteModal = () => {\n        this.state.deleteModalDisplay === 'none' ? this.setState({deleteModalDisplay: 'block'}) : this.setState({deleteModalDisplay: 'none'})\n    }\n\n    toggleModalDisplay = () => {\n        this.state.modalDisplay === 'none' ? this.setState({modalDisplay: 'block'}) : this.setState({modalDisplay: 'none'})\n        \n    }\n\n    markComplete = (id) => {\n        axios.post(\"/api/v1/update_task/\" + id,{\n            complete: true\n        }, {\n            headers: {\n              'auth-token': `${localStorage.getItem('auth-token')}`\n            }\n          }).then( res => {\n              alert(\"Succesfully marked task as complete\");\n              this.setState({\n                  markCompleteClicked: false,\n                  modalDisplay: 'none'\n              });\n              this.reloadPage();\n          }).catch(err => console.log('sorry' + err))\n    }\n\n    reloadPage = () => {\n        window.location.reload();\n    }\n\n    render(){\n        if(this.state.isLoaded){\n            \n            const loader = <Button variant=\"primary\" disabled>\n                                        <Spinner\n                                        as=\"span\"\n                                        animation=\"border\"\n                                        size=\"sm\"\n                                        role=\"status\"\n                                        aria-hidden=\"true\"\n                                        />\n                                        <span className=\"sr-only\">Loading...</span>\n                                    </Button>;\n\n          const markCompleteBtn =   <Button variant=\"primary\" onClick={() => {\n                                                this.setState({\n                                                    markCompleteClicked: true\n                                                })\n                                                this.markComplete(this.state.taskAss)\n                                            }}>Mark Complete</Button>;\n\n            const tasksList = this.props.userTasks.filter(task => task.userAssigned === this.props.userLoggedIn);\n            const completeTasks = tasksList.filter(task => task.complete)\n            const dueTasks = tasksList.filter(task => !task.complete)\n\n            const determineList = () => {\n                switch(this.state.nav){\n                    case 'tasksdue':\n                        return dueTasks\n                    \n                    case 'completeTasks':\n                        return completeTasks\n                        \n                    default:\n                        return tasksList    \n                }\n            }\n\n            return(\n                <>\n                {/* task modal with info */}\n                   <div className=\"modal-bg\" style={{\n                            display: this.state.modalDisplay\n                        }}>\n                        <Modal.Dialog className=\"modal-add-user\" style={{\n                            display: this.state.modalDisplay\n                        }}>\n                            <Modal.Header >\n                                <Modal.Title>{this.state.projectName}</Modal.Title>\n                            </Modal.Header>\n        \n                            <Modal.Body>\n                                <p>\n                                    <strong>Due Date: </strong>\n                                    {this.state.dueDate}</p>\n                                <br />\n                                <p>{this.state.taskDescription}</p>\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <Button variant=\"secondary\" onClick={this.toggleModalDisplay}>Close</Button>\n                               {\n                                 !this.state.markCompleteClicked ? markCompleteBtn : loader\n                               }\n                            </Modal.Footer>\n                            </Modal.Dialog>\n                        </div>\n    \n                <h2 id=\"h2-title\" style={{ position: 'relative', top: '20px' }}>Tasks Management</h2>\n                <Nav variant=\"pills\" defaultActiveKey=\"#\" className=\"navigation-tab-menu\" style={{position: 'absolute', left:0, top: '150px'}}>\n                            <Nav.Item className=\"user-tasks-nav\"\n                                onClick={() => {\n                                    this.setState({\n                                        taskDueNavBg:\"#FFF\",\n                                        taskDueNavColor: '#dc3545',\n                                        taskCompleteNavBg: '#FFF',\n                                        taskCompleteNavcolor: '#28a745',\n                                        nav: \"\"\n                                    })\n                                }}\n                            >\n                                <Nav.Link href=\"#\">Assigned Tasks List</Nav.Link>\n                            </Nav.Item>\n    \n                            <Nav.Item \n                                className=\"user-tasks-nav\"\n                                style={{ \n                                    cursor: 'pointer', \n                                    border: 'solid 1px #dc3545', \n                                    color: this.state.taskDueNavColor,\n                                    background: this.state.taskDueNavBg, \n                                    borderRadius: '9px', \n                                    padding:'.5rem .5rem', \n                                    marginLeft: '1rem'}}\n                            \n                            onClick={() => {\n                                this.setState({\n                                    taskDueNavColor: 'white',\n                                    taskDueNavBg: '#dc3545',\n                                    taskCompleteNavBg: '#FFF',\n                                    taskCompleteNavcolor: '#28a745',\n                                    nav: 'tasksdue'\n                                })\n                            }}    \n                                >\n                                Tasks Due {dueTasks.length}\n                            </Nav.Item>\n    \n                            <Nav.Item \n                              className=\"user-tasks-nav\" \n                              style={{\n                                  cursor: 'pointer',\n                                  border: 'solid 1px #28a745', \n                                  color: this.state.taskCompleteNavcolor,\n                                  background: this.state.taskCompleteNavBg, \n                                  borderRadius: '9px', \n                                  padding:'.5rem .5rem', \n                                  marginLeft: '1rem'}}\n\n                               onClick={ () => {\n                                    this.setState({\n                                        taskCompleteNavBg: '#28a745',\n                                        taskCompleteNavcolor: '#FFF',\n                                        taskDueNavBg: '#FFF',\n                                        taskDueNavColor: '#dc3545',\n                                        nav: \"completeTasks\"\n\n                                    })\n                               }}   \n                                  >\n                                Complete Tasks {completeTasks.length}\n                            </Nav.Item>\n                           \n                            </Nav>\n                  <ListGroup style={{minWidth: '50%', maxWidth: '70%', marginTop: '14.5%', cursor: 'pointer'}}>\n                   {\n                       determineList().reverse().map(task => {\n                          return (\n                          <ListGroup.Item variant={task.complete ? 'success' : 'danger'} style={{marginBottom: '16px'}} key={task._id} onClick={() => {\n                                this.setState({\n                                    taskAss: task._id,\n                                    projectName: task.projectName,\n                                    taskDescription: task.description,\n                                    dueDate: task.dueDate\n                                });\n                                this.toggleModalDisplay()\n                              }}>\n                              <b style={{\n                                  width: '65%'\n                              }}>{task.description}</b>\n                                <img \n                            src={users} \n                            alt=\"user avatar\" \n                            width=\"24px\" \n                            height= \"24px\" \n                            style={{\n                                position: 'absolute',\n                                right: '1.75rem'\n                                }} /> \n                              </ListGroup.Item>\n                          )\n                      })\n                   }\n                 </ListGroup>\n                </>\n            )\n        }\n        return     <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', width: '70%'}}>\n        <Spinner animation=\"grow\" />\n   </div>\n    }\n}"]},"metadata":{},"sourceType":"module"}