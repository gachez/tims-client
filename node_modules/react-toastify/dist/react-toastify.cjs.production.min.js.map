{"version":3,"file":"react-toastify.cjs.production.min.js","sources":["../src/core/eventManager.ts","../src/utils/propValidator.ts","../src/utils/constant.ts","../src/utils/collapseToast.ts","../src/utils/cssTransition.tsx","../src/components/CloseButton.tsx","../src/components/ProgressBar.tsx","../src/components/Toast.tsx","../src/components/Transitions.tsx","../src/components/ToastPositioner.tsx","../src/components/ToastContainer.tsx","../src/core/toast.tsx","../src/hooks/useKeeper.ts","../src/hooks/toastContainerReducer.ts","../src/hooks/useToastContainer.ts","../src/hooks/useToast.ts"],"sourcesContent":["import {\n  Id,\n  ToastContent,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps\n} from '../types';\nimport { ContainerInstance } from '../hooks';\n\nexport const enum Event {\n  Show,\n  Clear,\n  DidMount,\n  WillUnmount,\n  Change,\n  ClearWaitingQueue\n}\n\ntype OnShowCallback = (\n  content: ToastContent,\n  options: NotValidatedToastProps\n) => void;\ntype OnClearCallback = (id?: Id) => void;\ntype OnClearWaitingQueue = (params: ClearWaitingQueueParams) => void;\ntype OnDidMountCallback = (containerInstance: ContainerInstance) => void;\ntype OnWillUnmountCallback = OnDidMountCallback;\nexport type OnChangeCallback = (\n  toast: number,\n  containerId?: number | string\n) => void;\ntype Callback =\n  | OnShowCallback\n  | OnClearCallback\n  | OnClearWaitingQueue\n  | OnDidMountCallback\n  | OnWillUnmountCallback\n  | OnChangeCallback;\ntype TimeoutId = ReturnType<typeof window.setTimeout>;\n\nexport interface EventManager {\n  list: Map<Event, Callback[]>;\n  emitQueue: Map<Event, TimeoutId[]>;\n  on(event: Event.Show, callback: OnShowCallback): EventManager;\n  on(event: Event.Clear, callback: OnClearCallback): EventManager;\n  on(\n    event: Event.ClearWaitingQueue,\n    callback: OnClearWaitingQueue\n  ): EventManager;\n  on(event: Event.DidMount, callback: OnDidMountCallback): EventManager;\n  on(event: Event.WillUnmount, callback: OnWillUnmountCallback): EventManager;\n  on(event: Event.Change, callback: OnChangeCallback): EventManager;\n  off(event: Event, callback?: Callback): EventManager;\n  cancelEmit(event: Event): EventManager;\n  emit(\n    event: Event.Show,\n    content: React.ReactNode,\n    options: NotValidatedToastProps\n  ): void;\n  emit(event: Event.Clear, id?: string | number): void;\n  emit(event: Event.ClearWaitingQueue, params: ClearWaitingQueueParams): void;\n  emit(event: Event.DidMount, containerInstance: ContainerInstance): void;\n  emit(event: Event.WillUnmount, containerInstance: ContainerInstance): void;\n  emit(event: Event.Change, toast: number, containerId?: number | string): void;\n}\n\nexport const eventManager: EventManager = {\n  list: new Map(),\n  emitQueue: new Map(),\n\n  on(event: Event, callback: Callback) {\n    this.list.has(event) || this.list.set(event, []);\n    this.list.get(event)!.push(callback);\n    return this;\n  },\n\n  off(event, callback) {\n    if (callback) {\n      const cb = this.list.get(event)!.filter(cb => cb !== callback);\n      this.list.set(event, cb);\n      return this;\n    }\n    this.list.delete(event);\n    return this;\n  },\n\n  cancelEmit(event) {\n    const timers = this.emitQueue.get(event);\n    if (timers) {\n      timers.forEach((timer: TimeoutId) => clearTimeout(timer));\n      this.emitQueue.delete(event);\n    }\n\n    return this;\n  },\n\n  /**\n   * Enqueue the event at the end of the call stack\n   * Doing so let the user call toast as follow:\n   * toast('1')\n   * toast('2')\n   * toast('3')\n   * Without setTimemout the code above will not work\n   */\n  emit(event: Event, ...args: any[]) {\n    this.list.has(event) &&\n      this.list.get(event)!.forEach((callback: Callback) => {\n        const timer = setTimeout(() => {\n          // @ts-ignore\n          callback(...args);\n        }, 0);\n\n        this.emitQueue.has(event) || this.emitQueue.set(event, []);\n        this.emitQueue.get(event)!.push(timer);\n      });\n  }\n};\n","import { isValidElement } from 'react';\n\nimport { Id } from '../types';\n\nexport function isNum(v: any): v is Number {\n  return typeof v === 'number' && !isNaN(v);\n}\n\nexport function isBool(v: any): v is Boolean {\n  return typeof v === 'boolean';\n}\n\nexport function isStr(v: any): v is String {\n  return typeof v === 'string';\n}\n\nexport function isFn(v: any): v is Function {\n  return typeof v === 'function';\n}\n\nexport function parseClassName(v: any) {\n  return typeof v === 'string' ? v : null;\n}\n\nexport function objectValues<T>(obj: Record<string, T>) {\n  return Object.keys(obj).map(key => obj[key]);\n}\n\nexport function hasToastId(toastId?: Id) {\n  return toastId === 0 || toastId;\n}\n\nexport function getAutoCloseDelay(\n  toastAutoClose?: false | number,\n  containerAutoClose?: false | number\n) {\n  return toastAutoClose === false ||\n    (isNum(toastAutoClose) && toastAutoClose > 0)\n    ? toastAutoClose\n    : containerAutoClose;\n}\n\nexport const canUseDom = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nexport function canBeRendered<T>(content: T): boolean {\n  return (\n    isValidElement(content) || isStr(content) || isFn(content) || isNum(content)\n  );\n}\n","import { ToastPosition, TypeOptions } from '../types';\n\ntype KeyOfPosition =\n  | 'TOP_LEFT'\n  | 'TOP_RIGHT'\n  | 'TOP_CENTER'\n  | 'BOTTOM_LEFT'\n  | 'BOTTOM_RIGHT'\n  | 'BOTTOM_CENTER';\n\ntype KeyOfType = 'INFO' | 'SUCCESS' | 'WARNING' | 'ERROR' | 'DEFAULT' | 'DARK';\n\nexport const POSITION: { [key in KeyOfPosition]: ToastPosition } = {\n  TOP_LEFT: 'top-left',\n  TOP_RIGHT: 'top-right',\n  TOP_CENTER: 'top-center',\n  BOTTOM_LEFT: 'bottom-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  BOTTOM_CENTER: 'bottom-center'\n};\n\nexport const TYPE: { [key in KeyOfType]: TypeOptions } = {\n  INFO: 'info',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ERROR: 'error',\n  DEFAULT: 'default',\n  DARK: 'dark'\n};\n\nexport const enum DEFAULT {\n  COLLAPSE_DURATION = 300,\n  DEBOUNCE_DURATION = 50,\n  CSS_NAMESPACE = 'Toastify'\n}\n","import { DEFAULT } from './constant';\n\n/**\n * Used to collapse toast after exit animation\n */\nexport function collapseToast(\n  node: HTMLElement,\n  done: () => void,\n  duration = DEFAULT.COLLAPSE_DURATION\n) {\n  const height = node.scrollHeight;\n  const style = node.style;\n\n  requestAnimationFrame(() => {\n    style.minHeight = 'initial';\n    style.height = height + 'px';\n    style.transition = `all ${duration}ms`;\n\n    requestAnimationFrame(() => {\n      style.height = '0';\n      style.padding = '0';\n      style.margin = '0';\n      setTimeout(() => done(), duration as number);\n    });\n  });\n}\n","import * as React from 'react';\nimport { Transition } from 'react-transition-group';\nimport { ToastTransitionProps } from '../types';\n\nimport { collapseToast } from './collapseToast';\nimport { DEFAULT } from './constant';\n\nexport interface CSSTransitionProps {\n  /**\n   * Css class to apply when toast enter\n   */\n  enter: string;\n\n  /**\n   * Css class to apply when toast leave\n   */\n  exit: string;\n\n  /**\n   * Define the duration of the transition in ms\n   * You can also pass an array `[enterDuration, exitDuration]`\n   * `Default: 750`\n   */\n  duration?: number | [number, number];\n\n  /**\n   * Append current toast position to the classname.\n   * For instance `myclass--top-center`...\n   * `Default: false`\n   */\n  appendPosition?: boolean;\n\n  /**\n   * Collapse toast smoothly when animation end\n   * `Default: true`\n   */\n  collapse?: boolean;\n\n  /**\n   * Collapse transition duration\n   * `Default: 300`\n   */\n  collapseDuration?: number;\n}\n\nexport function cssTransition({\n  enter,\n  exit,\n  duration = 750,\n  appendPosition = false,\n  collapse = true,\n  collapseDuration = DEFAULT.COLLAPSE_DURATION\n}: CSSTransitionProps) {\n  let enterDuration: number, exitDuration: number;\n\n  if (Array.isArray(duration) && duration.length === 2) {\n    [enterDuration, exitDuration] = duration;\n  } else {\n    enterDuration = exitDuration = duration as number;\n  }\n\n  return function ToastTransition({\n    children,\n    position,\n    preventExitTransition,\n    done,\n    ...props\n  }: ToastTransitionProps) {\n    const enterClassName = appendPosition ? `${enter}--${position}` : enter;\n    const exitClassName = appendPosition ? `${exit}--${position}` : exit;\n\n    const onEnter = () => {\n      const node = props.nodeRef.current;\n      if (node) {\n        node.classList.add(enterClassName);\n        node.style.animationFillMode = 'forwards';\n        node.style.animationDuration = `${enterDuration}ms`;\n      }\n    };\n\n    const onEntered = () => {\n      const node = props.nodeRef.current;\n      if (node) {\n        node.classList.remove(enterClassName);\n        node.style.cssText = '';\n      }\n    };\n\n    const onExited = () => {\n      const node = props.nodeRef.current;\n\n      if (node) {\n        node.removeEventListener('animationend', onExited);\n        collapse ? collapseToast(node, done, collapseDuration) : done();\n      }\n    };\n\n    const onExit = () => {\n      const node = props.nodeRef.current;\n      if (node) {\n        node.classList.add(exitClassName);\n        node.style.animationFillMode = 'forwards';\n        node.style.animationDuration = `${exitDuration}ms`;\n        node.addEventListener('animationend', onExited);\n      }\n    };\n\n    return (\n      <Transition\n        {...props}\n        timeout={\n          preventExitTransition\n            ? collapse\n              ? collapseDuration\n              : DEFAULT.DEBOUNCE_DURATION\n            : {\n                enter: enterDuration,\n                exit: collapse\n                  ? exitDuration + collapseDuration\n                  : exitDuration + DEFAULT.DEBOUNCE_DURATION\n              }\n        }\n        onEnter={onEnter}\n        onEntered={onEntered}\n        onExit={preventExitTransition ? onExited : onExit}\n        unmountOnExit\n      >\n        {children}\n      </Transition>\n    );\n  };\n}\n","import * as React from 'react';\nimport { DEFAULT } from '../utils';\nimport { TypeOptions } from '../types';\n\nexport interface CloseButtonProps {\n  closeToast: (e: React.MouseEvent<HTMLElement>) => void;\n  type: TypeOptions;\n  ariaLabel?: string;\n}\n\nexport function CloseButton({\n  closeToast,\n  type,\n  ariaLabel = 'close'\n}: CloseButtonProps) {\n  return (\n    <button\n      className={`${DEFAULT.CSS_NAMESPACE}__close-button ${DEFAULT.CSS_NAMESPACE}__close-button--${type}`}\n      type=\"button\"\n      onClick={e => {\n        e.stopPropagation();\n        closeToast(e);\n      }}\n      aria-label={ariaLabel}\n    >\n      <svg aria-hidden=\"true\" viewBox=\"0 0 14 16\">\n        <path\n          fillRule=\"evenodd\"\n          d=\"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z\"\n        />\n      </svg>\n    </button>\n  );\n}\n","import * as React from 'react';\nimport cx from 'classnames';\n\nimport { TYPE, DEFAULT } from './../utils';\nimport { TypeOptions } from '../types';\n\nexport interface ProgressBarProps {\n  /**\n   * The animation delay which determine when to close the toast\n   */\n  delay: number;\n\n  /**\n   * Whether or not the animation is running or paused\n   */\n  isRunning: boolean;\n\n  /**\n   * Func to close the current toast\n   */\n  closeToast: () => void;\n\n  /**\n   * Optional type : info, success ...\n   */\n  type: TypeOptions;\n\n  /**\n   * Hide or not the progress bar\n   */\n  hide?: boolean;\n\n  /**\n   * Optionnal className\n   */\n  className?: string | null;\n\n  /**\n   * Optionnal inline style\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Tell wether or not controlled progress bar is used\n   */\n  controlledProgress?: boolean;\n\n  /**\n   * Controlled progress value\n   */\n  progress?: number | string;\n\n  /**\n   * Support rtl content\n   */\n  rtl?: boolean;\n\n  /**\n   * Tell if the component is visible on screen or not\n   */\n  isIn?: boolean;\n}\n\nexport function ProgressBar({\n  delay,\n  isRunning,\n  closeToast,\n  type,\n  hide,\n  className,\n  style: userStyle,\n  controlledProgress,\n  progress,\n  rtl,\n  isIn\n}: ProgressBarProps) {\n  const style: React.CSSProperties = {\n    ...userStyle,\n    animationDuration: `${delay}ms`,\n    animationPlayState: isRunning ? 'running' : 'paused',\n    opacity: hide ? 0 : 1\n  };\n\n  if (controlledProgress) style.transform = `scaleX(${progress})`;\n\n  const classNames = cx(\n    `${DEFAULT.CSS_NAMESPACE}__progress-bar`,\n    controlledProgress\n      ? `${DEFAULT.CSS_NAMESPACE}__progress-bar--controlled`\n      : `${DEFAULT.CSS_NAMESPACE}__progress-bar--animated`,\n    `${DEFAULT.CSS_NAMESPACE}__progress-bar--${type}`,\n    {\n      [`${DEFAULT.CSS_NAMESPACE}__progress-bar--rtl`]: rtl\n    },\n    className\n  );\n\n  // 🧐 controlledProgress is derived from progress\n  // so if controlledProgress is set\n  // it means that this is also the case for progress\n  const animationEvent = {\n    [controlledProgress && progress! >= 1\n      ? 'onTransitionEnd'\n      : 'onAnimationEnd']:\n      controlledProgress && progress! < 1\n        ? null\n        : () => {\n            isIn && closeToast();\n          }\n  };\n\n  return <div className={classNames} style={style} {...animationEvent} />;\n}\n\nProgressBar.defaultProps = {\n  type: TYPE.DEFAULT,\n  hide: false\n};\n","import * as React from 'react';\nimport cx from 'classnames';\n\nimport { ProgressBar } from './ProgressBar';\nimport { ToastProps } from '../types';\nimport { DEFAULT, isFn } from '../utils';\nimport { useToast } from '../hooks';\n\nexport const Toast: React.FC<ToastProps> = props => {\n  const {\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  } = useToast(props);\n  const {\n    closeButton,\n    children,\n    autoClose,\n    onClick,\n    type,\n    hideProgressBar,\n    closeToast,\n    transition: Transition,\n    position,\n    className,\n    style,\n    bodyClassName,\n    bodyStyle,\n    progressClassName,\n    progressStyle,\n    updateId,\n    role,\n    progress,\n    rtl,\n    toastId,\n    deleteToast\n  } = props;\n  const cssClasses = cx(\n    `${DEFAULT.CSS_NAMESPACE}__toast`,\n    `${DEFAULT.CSS_NAMESPACE}__toast--${type}`,\n    {\n      [`${DEFAULT.CSS_NAMESPACE}__toast--rtl`]: rtl\n    },\n    className\n  );\n  const controlledProgress = !!progress;\n\n  function renderCloseButton(closeButton: any) {\n    if (!closeButton) return null;\n\n    const props = { closeToast, type };\n    if (isFn(closeButton)) return closeButton(props);\n    if (React.isValidElement(closeButton))\n      return React.cloneElement(closeButton, props);\n  }\n\n  return (\n    <Transition\n      in={props.in!}\n      appear\n      done={deleteToast}\n      position={position}\n      preventExitTransition={preventExitTransition}\n      nodeRef={toastRef}\n    >\n      <div\n        id={toastId as string}\n        onClick={onClick}\n        className={cssClasses}\n        {...eventHandlers}\n        style={style}\n        ref={toastRef}\n      >\n        <div\n          {...(props.in && { role: role })}\n          className={cx(`${DEFAULT.CSS_NAMESPACE}__toast-body`, bodyClassName)}\n          style={bodyStyle}\n        >\n          {children}\n        </div>\n        {renderCloseButton(closeButton)}\n        {(autoClose || controlledProgress) && (\n          <ProgressBar\n            {...(updateId && !controlledProgress\n              ? { key: `pb-${updateId}` }\n              : {})}\n            rtl={rtl}\n            delay={autoClose as number}\n            isRunning={isRunning}\n            isIn={props.in}\n            closeToast={closeToast}\n            hide={hideProgressBar}\n            type={type}\n            style={progressStyle}\n            className={progressClassName}\n            controlledProgress={controlledProgress}\n            progress={progress}\n          />\n        )}\n      </div>\n    </Transition>\n  );\n};\n","import { DEFAULT, cssTransition } from '../utils';\n\nconst Bounce = cssTransition({\n  enter: `${DEFAULT.CSS_NAMESPACE}__bounce-enter`,\n  exit: `${DEFAULT.CSS_NAMESPACE}__bounce-exit`,\n  appendPosition: true\n});\n\nconst Slide = cssTransition({\n  enter: `${DEFAULT.CSS_NAMESPACE}__slide-enter`,\n  exit: `${DEFAULT.CSS_NAMESPACE}__slide-exit`,\n  duration: [450, 750],\n  appendPosition: true\n});\n\nconst Zoom = cssTransition({\n  enter: `${DEFAULT.CSS_NAMESPACE}__zoom-enter`,\n  exit: `${DEFAULT.CSS_NAMESPACE}__zoom-exit`\n});\n\nconst Flip = cssTransition({\n  enter: `${DEFAULT.CSS_NAMESPACE}__flip-enter`,\n  exit: `${DEFAULT.CSS_NAMESPACE}__flip-exit`\n});\n\nexport { Bounce, Slide, Zoom, Flip };\n","import * as React from 'react';\nimport { ToastProps } from '../types';\n\ntype ToastPositionerProps = Pick<ToastProps, 'className' | 'style' | 'in'>;\n\nexport const ToastPositioner: React.FC<ToastPositionerProps> = ({\n  children,\n  className,\n  style,\n  ...rest\n}) => {\n  // Monkey patch react-transition-group\n  // As exit transition is broken with strict mode\n  delete rest.in;\n\n  return (\n    <div className={className!} style={style}>\n      {React.Children.map(children, child =>\n        React.cloneElement(child as React.ReactElement<any>, rest)\n      )}\n    </div>\n  );\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { Toast } from './Toast';\nimport { CloseButton } from './CloseButton';\nimport { Bounce } from './Transitions';\nimport { POSITION, DEFAULT, parseClassName, objectValues } from '../utils';\nimport { useToastContainer } from '../hooks';\nimport { ToastContainerProps, ToastPosition } from '../types';\nimport { ToastPositioner } from './ToastPositioner';\n\nexport const ToastContainer: React.FC<ToastContainerProps> = props => {\n  const { getToastToRender, containerRef, isToastActive } = useToastContainer(\n    props\n  );\n  const { className, style, rtl, containerId } = props;\n\n  return (\n    <div\n      ref={containerRef}\n      className={DEFAULT.CSS_NAMESPACE as string}\n      id={containerId as string}\n    >\n      {getToastToRender((position, toastList) => {\n        const swag = {\n          className: cx(\n            `${DEFAULT.CSS_NAMESPACE}__toast-container`,\n            `${DEFAULT.CSS_NAMESPACE}__toast-container--${position}`,\n            { [`${DEFAULT.CSS_NAMESPACE}__toast-container--rtl`]: rtl },\n            parseClassName(className)\n          ),\n          style:\n            toastList.length === 0\n              ? { ...style, pointerEvents: 'none' }\n              : { ...style }\n        } as any;\n\n        return (\n          <ToastPositioner {...swag} key={`container-${position}`}>\n            {toastList.map(({ content, props: toastProps }) => {\n              return (\n                <Toast\n                  {...toastProps}\n                  in={isToastActive(toastProps.toastId)}\n                  key={`toast-${toastProps.key}`}\n                  closeButton={\n                    toastProps.closeButton === true\n                      ? CloseButton\n                      : toastProps.closeButton\n                  }\n                >\n                  {content}\n                </Toast>\n              );\n            })}\n          </ToastPositioner>\n        );\n      })}\n    </div>\n  );\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  // @ts-ignore\n  ToastContainer.propTypes = {\n    // @ts-ignore\n    position: PropTypes.oneOf(objectValues(POSITION)),\n\n    // @ts-ignore\n    autoClose: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n\n    // @ts-ignore\n    closeButton: PropTypes.oneOfType([\n      PropTypes.node,\n      PropTypes.bool,\n      PropTypes.func\n    ]),\n    hideProgressBar: PropTypes.bool,\n    pauseOnHover: PropTypes.bool,\n    closeOnClick: PropTypes.bool,\n    newestOnTop: PropTypes.bool,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    toastClassName: PropTypes.string,\n    bodyClassName: PropTypes.string,\n    progressClassName: PropTypes.string,\n    progressStyle: PropTypes.object,\n    transition: PropTypes.func,\n    rtl: PropTypes.bool,\n    draggable: PropTypes.bool,\n    draggablePercent: PropTypes.number,\n    pauseOnFocusLoss: PropTypes.bool,\n    enableMultiContainer: PropTypes.bool,\n    containerId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    role: PropTypes.string,\n    onClick: PropTypes.func\n  };\n}\n\nToastContainer.defaultProps = {\n  position: POSITION.TOP_RIGHT as ToastPosition,\n  transition: Bounce,\n  rtl: false,\n  autoClose: 5000,\n  hideProgressBar: false,\n  closeButton: CloseButton,\n  pauseOnHover: true,\n  pauseOnFocusLoss: true,\n  closeOnClick: true,\n  newestOnTop: false,\n  draggable: true,\n  draggablePercent: 80,\n  role: 'alert'\n};\n","import * as React from 'react';\nimport { render } from 'react-dom';\n\nimport { POSITION, TYPE, canUseDom, isStr, isNum, isFn } from '../utils';\nimport { eventManager, OnChangeCallback, Event } from './eventManager';\nimport {\n  ToastContent,\n  ToastOptions,\n  ToastProps,\n  Id,\n  ToastContainerProps,\n  UpdateOptions,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps\n} from '../types';\nimport { ContainerInstance } from 'hooks';\nimport { ToastContainer } from '../components';\n\ninterface EnqueuedToast {\n  content: ToastContent;\n  options: NotValidatedToastProps;\n}\n\nlet containers = new Map<ContainerInstance | Id, ContainerInstance>();\nlet latestInstance: ContainerInstance | Id;\nlet containerDomNode: HTMLElement;\nlet containerConfig: ToastContainerProps;\nlet queue: EnqueuedToast[] = [];\nlet lazy = false;\n\n/**\n * Check whether any container is currently mounted in the DOM\n */\nfunction isAnyContainerMounted() {\n  return containers.size > 0;\n}\n\n/**\n * Get the container by id. Returns the last container declared when no id is given.\n */\nfunction getContainer(containerId?: Id) {\n  if (!isAnyContainerMounted()) return null;\n  return containers.get(!containerId ? latestInstance : containerId);\n}\n\n/**\n * Get the toast by id, given it's in the DOM, otherwise returns null\n */\nfunction getToast(toastId: Id, { containerId }: ToastOptions) {\n  const container = getContainer(containerId);\n  if (!container) return null;\n\n  return container.getToast(toastId);\n}\n\n/**\n * Generate a random toastId\n */\nfunction generateToastId() {\n  return (Math.random().toString(36) + Date.now().toString(36)).substr(2, 10);\n}\n\n/**\n * Generate a toastId or use the one provided\n */\nfunction getToastId(options?: ToastOptions) {\n  if (options && (isStr(options.toastId) || isNum(options.toastId))) {\n    return options.toastId;\n  }\n\n  return generateToastId();\n}\n\n/**\n * If the container is not mounted, the toast is enqueued and\n * the container lazy mounted\n */\nfunction dispatchToast(\n  content: ToastContent,\n  options: NotValidatedToastProps\n): Id {\n  if (isAnyContainerMounted()) {\n    eventManager.emit(Event.Show, content, options);\n  } else {\n    queue.push({ content, options });\n    if (lazy && canUseDom) {\n      lazy = false;\n      containerDomNode = document.createElement('div');\n      document.body.appendChild(containerDomNode);\n      render(<ToastContainer {...containerConfig} />, containerDomNode);\n    }\n  }\n\n  return options.toastId;\n}\n\n/**\n * Merge provided options with the defaults settings and generate the toastId\n */\nfunction mergeOptions(type: string, options?: ToastOptions) {\n  return {\n    ...options,\n    type: (options && options.type) || type,\n    toastId: getToastId(options)\n  } as NotValidatedToastProps;\n}\n\nconst toast = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.DEFAULT, options));\n\ntoast.success = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.SUCCESS, options));\n\ntoast.info = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.INFO, options));\n\ntoast.error = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.ERROR, options));\n\ntoast.warning = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.WARNING, options));\n\ntoast.dark = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.DARK, options));\n\n/**\n * Maybe I should remove warning in favor of warn, I don't know\n */\ntoast.warn = toast.warning;\n\n/**\n * Remove toast programmaticaly\n */\ntoast.dismiss = (id?: Id) =>\n  isAnyContainerMounted() && eventManager.emit(Event.Clear, id);\n\n/**\n * Clear waiting queue when limit is used\n */\ntoast.clearWaitingQueue = (params: ClearWaitingQueueParams = {}) =>\n  isAnyContainerMounted() && eventManager.emit(Event.ClearWaitingQueue, params);\n\n/**\n * return true if one container is displaying the toast\n */\ntoast.isActive = (id: Id) => {\n  let isToastActive = false;\n\n  containers.forEach(container => {\n    if (container.isToastActive && container.isToastActive(id)) {\n      isToastActive = true;\n    }\n  });\n\n  return isToastActive;\n};\n\ntoast.update = (toastId: Id, options: UpdateOptions = {}) => {\n  // if you call toast and toast.update directly nothing will be displayed\n  // this is why I defered the update\n  setTimeout(() => {\n    const toast = getToast(toastId, options as ToastOptions);\n    if (toast) {\n      const { props: oldOptions, content: oldContent } = toast;\n\n      const nextOptions = {\n        ...oldOptions,\n        ...options,\n        toastId: options.toastId || toastId,\n        updateId: generateToastId()\n      } as ToastProps & UpdateOptions;\n\n      if (nextOptions.toastId !== toastId) nextOptions.staleId = toastId;\n\n      const content =\n        typeof nextOptions.render !== 'undefined'\n          ? nextOptions.render\n          : oldContent;\n      delete nextOptions.render;\n\n      dispatchToast(content, nextOptions);\n    }\n  }, 0);\n};\n\n/**\n * Used for controlled progress bar.\n */\ntoast.done = (id: Id) => {\n  toast.update(id, {\n    progress: 1\n  });\n};\n\n/**\n * Track changes. The callback get the number of toast displayed\n *\n */\ntoast.onChange = (callback: OnChangeCallback) => {\n  if (isFn(callback)) {\n    eventManager.on(Event.Change, callback);\n  }\n  return () => {\n    isFn(callback) && eventManager.off(Event.Change, callback);\n  };\n};\n\n/**\n * Configure the ToastContainer when lazy mounted\n */\ntoast.configure = (config: ToastContainerProps = {}) => {\n  lazy = true;\n  containerConfig = config;\n};\n\ntoast.POSITION = POSITION;\ntoast.TYPE = TYPE;\n\n/**\n * Wait until the ToastContainer is mounted to dispatch the toast\n * and attach isActive method\n */\neventManager\n  .on(Event.DidMount, (containerInstance: ContainerInstance) => {\n    latestInstance = containerInstance.containerId || containerInstance;\n    containers.set(latestInstance, containerInstance);\n\n    queue.forEach(item => {\n      eventManager.emit(Event.Show, item.content, item.options);\n    });\n\n    queue = [];\n  })\n  .on(Event.WillUnmount, (containerInstance: ContainerInstance) => {\n    containers.delete(containerInstance.containerId || containerInstance);\n\n    if (containers.size === 0) {\n      eventManager\n        .off(Event.Show)\n        .off(Event.Clear)\n        .off(Event.ClearWaitingQueue);\n    }\n\n    if (canUseDom && containerDomNode) {\n      document.body.removeChild(containerDomNode);\n    }\n  });\n\nexport { toast };\n","import { useRef, useEffect } from 'react';\n\n/**\n * `useKeeper` is a helper around `useRef`.\n *\n * You don't need to access the `.current`property to get the value\n * If refresh is set to true. The ref will be updated every render\n */\nexport function useKeeper<T>(arg: T, refresh = false) {\n  const ref = useRef<T>(arg);\n\n  useEffect(() => {\n    if (refresh) ref.current = arg;\n  });\n\n  return ref.current;\n}\n","import { Id } from '../types';\n\nimport { hasToastId } from '../utils';\n\nexport type State = Array<Id>;\nexport type Action =\n  | { type: 'ADD'; toastId: Id; staleId?: Id }\n  | { type: 'REMOVE'; toastId?: Id };\n\nexport function reducer(state: State, action: Action) {\n  switch (action.type) {\n    case 'ADD':\n      return [...state, action.toastId].filter(id => id !== action.staleId);\n    case 'REMOVE':\n      return hasToastId(action.toastId)\n        ? state.filter(id => id !== action.toastId)\n        : [];\n  }\n}\n","import {\n  useEffect,\n  useRef,\n  useReducer,\n  cloneElement,\n  isValidElement\n} from 'react';\nimport { eventManager, Event } from '../core';\nimport {\n  parseClassName,\n  canBeRendered,\n  isBool,\n  isFn,\n  isNum,\n  isStr,\n  hasToastId,\n  getAutoCloseDelay\n} from '../utils';\n\nimport {\n  Id,\n  ToastContainerProps,\n  ToastProps,\n  ToastContent,\n  Toast,\n  ToastPosition,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  ToastTransition\n} from '../types';\nimport { useKeeper } from './useKeeper';\nimport { reducer } from './toastContainerReducer';\n\ntype CollectionItem = Record<Id, Toast>;\ntype ToastToRender = Partial<Record<ToastPosition, Toast[]>>;\n\ninterface QueuedToast {\n  toastContent: ToastContent;\n  toastProps: ToastProps;\n  staleId?: Id;\n}\n\nexport interface ContainerInstance {\n  toastKey: number;\n  displayedToast: number;\n  props: ToastContainerProps;\n  containerId?: Id | null;\n  isToastActive: (toastId: Id) => boolean;\n  getToast: (id: Id) => Toast | null;\n}\n\nexport function useToastContainer(props: ToastContainerProps) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const [toast, dispatch] = useReducer(reducer, []);\n  const containerRef = useRef(null);\n  let toastCount = useKeeper(0);\n  let queue = useKeeper<QueuedToast[]>([]);\n  const collection = useKeeper<CollectionItem>({});\n  const instance = useKeeper<ContainerInstance>({\n    toastKey: 1,\n    displayedToast: 0,\n    props,\n    containerId: null,\n    isToastActive: isToastActive,\n    getToast: id => collection[id] || null\n  });\n\n  useEffect(() => {\n    instance.containerId = props.containerId;\n    eventManager\n      .cancelEmit(Event.WillUnmount)\n      .on(Event.Show, buildToast)\n      .on(Event.Clear, toastId => containerRef.current && removeToast(toastId))\n      .on(Event.ClearWaitingQueue, clearWaitingQueue)\n      .emit(Event.DidMount, instance);\n\n    return () => eventManager.emit(Event.WillUnmount, instance);\n  }, []);\n\n  useEffect(() => {\n    instance.isToastActive = isToastActive;\n    instance.displayedToast = toast.length;\n    eventManager.emit(Event.Change, toast.length, props.containerId);\n  }, [toast]);\n\n  useEffect(() => {\n    instance.props = props;\n  });\n\n  function isToastActive(id: Id) {\n    return toast.indexOf(id) !== -1;\n  }\n\n  function clearWaitingQueue({ containerId }: ClearWaitingQueueParams) {\n    const { limit, enableMultiContainer } = instance.props;\n    if (\n      limit &&\n      (!containerId ||\n        (instance.containerId === containerId && enableMultiContainer))\n    ) {\n      toastCount -= queue.length;\n      queue = [];\n    }\n  }\n\n  function removeToast(toastId?: Id) {\n    const queueLen = queue.length;\n    toastCount = hasToastId(toastId)\n      ? toastCount - 1\n      : toastCount - instance.displayedToast;\n\n    if (toastCount < 0) toastCount = 0;\n\n    if (queueLen > 0) {\n      const freeSlot = hasToastId(toastId) ? 1 : instance.props.limit!;\n\n      if (queueLen === 1 || freeSlot === 1) {\n        instance.displayedToast++;\n        dequeueToast();\n      } else {\n        const toDequeue = freeSlot > queueLen ? queueLen : freeSlot;\n        instance.displayedToast = toDequeue;\n\n        for (let i = 0; i < toDequeue; i++) dequeueToast();\n      }\n    }\n    dispatch({ type: 'REMOVE', toastId });\n  }\n\n  function dequeueToast() {\n    const { toastContent, toastProps, staleId } = queue.shift() as QueuedToast;\n\n    // ensure that exit transition has been completed, hence the timeout\n    setTimeout(() => {\n      appendToast(toastContent, toastProps, staleId);\n    }, 500);\n  }\n\n  /**\n   * check if a container is attached to the dom\n   * check for multi-container, build only if associated\n   * check for duplicate toastId if no update\n   */\n  function isNotValid({\n    containerId,\n    toastId,\n    updateId\n  }: NotValidatedToastProps) {\n    return !containerRef.current ||\n      (instance.props.enableMultiContainer &&\n        containerId !== instance.props.containerId) ||\n      (instance.isToastActive(toastId) && updateId == null)\n      ? true\n      : false;\n  }\n\n  // this function and all the function called inside needs to rely on ref(`useKeeper`)\n  function buildToast(\n    content: ToastContent,\n    { delay, staleId, ...options }: NotValidatedToastProps\n  ) {\n    if (!canBeRendered(content) || isNotValid(options)) return;\n\n    const { toastId, updateId } = options;\n    const { props, isToastActive } = instance;\n    const closeToast = () => removeToast(toastId);\n    const isNotAnUpdate = !isToastActive(toastId);\n\n    if (isNotAnUpdate) toastCount++;\n\n    const toastProps: ToastProps = {\n      toastId,\n      updateId,\n      key: options.key || instance.toastKey++,\n      type: options.type,\n      closeToast: closeToast,\n      closeButton: options.closeButton,\n      rtl: props.rtl,\n      position: options.position || (props.position as ToastPosition),\n      transition: options.transition || (props.transition as ToastTransition),\n      className: parseClassName(options.className || props.toastClassName),\n      bodyClassName: parseClassName(\n        options.bodyClassName || props.bodyClassName\n      ),\n      style: options.style || props.toastStyle,\n      bodyStyle: options.bodyStyle || props.bodyStyle,\n      onClick: options.onClick || props.onClick,\n      pauseOnHover: isBool(options.pauseOnHover)\n        ? options.pauseOnHover\n        : props.pauseOnHover,\n      pauseOnFocusLoss: isBool(options.pauseOnFocusLoss)\n        ? options.pauseOnFocusLoss\n        : props.pauseOnFocusLoss,\n      draggable: isBool(options.draggable)\n        ? options.draggable\n        : props.draggable,\n      draggablePercent: isNum(options.draggablePercent)\n        ? options.draggablePercent\n        : (props.draggablePercent as number),\n      closeOnClick: isBool(options.closeOnClick)\n        ? options.closeOnClick\n        : props.closeOnClick,\n      progressClassName: parseClassName(\n        options.progressClassName || props.progressClassName\n      ),\n      progressStyle: options.progressStyle || props.progressStyle,\n      autoClose: getAutoCloseDelay(options.autoClose, props.autoClose),\n      hideProgressBar: isBool(options.hideProgressBar)\n        ? options.hideProgressBar\n        : props.hideProgressBar,\n      progress: options.progress,\n      role: isStr(options.role) ? options.role : props.role,\n      deleteToast() {\n        removeFromCollection(toastId);\n      }\n    };\n\n    if (isFn(options.onOpen)) toastProps.onOpen = options.onOpen;\n    if (isFn(options.onClose)) toastProps.onClose = options.onClose;\n\n    let closeButton = props.closeButton;\n\n    if (options.closeButton === false || canBeRendered(options.closeButton)) {\n      closeButton = options.closeButton;\n    } else if (options.closeButton === true) {\n      closeButton = canBeRendered(props.closeButton) ? props.closeButton : true;\n    }\n\n    toastProps.closeButton = closeButton;\n\n    let toastContent = content;\n\n    if (isValidElement(content) && !isStr(content.type)) {\n      toastContent = cloneElement(content, {\n        closeToast\n      });\n    } else if (isFn(content)) {\n      toastContent = content({ closeToast });\n    }\n\n    // not handling limit + delay by design. Waiting for user feedback first\n    if (\n      props.limit &&\n      props.limit > 0 &&\n      toastCount > props.limit &&\n      isNotAnUpdate\n    ) {\n      queue.push({ toastContent, toastProps, staleId });\n    } else if (isNum(delay) && (delay as number) > 0) {\n      setTimeout(() => {\n        appendToast(toastContent, toastProps, staleId);\n      }, delay);\n    } else {\n      appendToast(toastContent, toastProps, staleId);\n    }\n  }\n\n  function appendToast(\n    content: ToastContent,\n    toastProps: ToastProps,\n    staleId?: Id\n  ) {\n    const { toastId } = toastProps;\n\n    collection[toastId] = {\n      content,\n      props: toastProps\n    };\n    dispatch({\n      type: 'ADD',\n      toastId,\n      staleId\n    });\n  }\n\n  function removeFromCollection(toastId: Id) {\n    delete collection[toastId];\n    forceUpdate();\n  }\n\n  function getToastToRender<T>(\n    cb: (position: ToastPosition, toastList: Toast[]) => T\n  ) {\n    const toastToRender: ToastToRender = {};\n    const toastList = props.newestOnTop\n      ? Object.keys(collection).reverse()\n      : Object.keys(collection);\n\n    for (let i = 0; i < toastList.length; i++) {\n      const toast = collection[toastList[i]];\n      const { position } = toast.props;\n      toastToRender[position] || (toastToRender[position] = []);\n\n      toastToRender[position]!.push(toast);\n    }\n\n    return (Object.keys(toastToRender) as Array<ToastPosition>).map(p =>\n      cb(p, toastToRender[p]!)\n    );\n  }\n\n  return {\n    getToastToRender,\n    collection,\n    containerRef,\n    isToastActive\n  };\n}\n","import {\n  useState,\n  useRef,\n  useEffect,\n  isValidElement,\n  DOMAttributes\n} from 'react';\n\nimport { isFn } from '../utils';\nimport { ToastProps } from '../types';\nimport { useKeeper } from './useKeeper';\n\ninterface Draggable {\n  start: number;\n  x: number;\n  y: number;\n  deltaX: number;\n  removalDistance: number;\n  canCloseOnClick: boolean;\n  canDrag: boolean;\n  boundingRect: DOMRect | null;\n}\n\ntype DragEvent = MouseEvent & TouchEvent;\n\nfunction getX(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientX\n    : e.clientX;\n}\n\nfunction getY(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientY\n    : e.clientY;\n}\n\nexport function useToast(props: ToastProps) {\n  const [isRunning, setIsRunning] = useState(true);\n  const [preventExitTransition, setPreventExitTransition] = useState(false);\n  const toastRef = useRef<HTMLDivElement>(null);\n  const drag = useKeeper<Draggable>({\n    start: 0,\n    x: 0,\n    y: 0,\n    deltaX: 0,\n    removalDistance: 0,\n    canCloseOnClick: true,\n    canDrag: false,\n    boundingRect: null\n  });\n  const syncProps = useKeeper(props, true);\n  const { autoClose, pauseOnHover, closeToast, onClick, closeOnClick } = props;\n\n  useEffect(() => {\n    if (isFn(props.onOpen))\n      props.onOpen(isValidElement(props.children) && props.children.props);\n\n    return () => {\n      if (isFn(syncProps.onClose))\n        syncProps.onClose(\n          isValidElement(syncProps.children) && syncProps.children.props\n        );\n    };\n  }, []);\n\n  useEffect(() => {\n    props.draggable && bindDragEvents();\n    return () => {\n      props.draggable && unbindDragEvents();\n    };\n  }, [props.draggable]);\n\n  useEffect(() => {\n    props.pauseOnFocusLoss && bindFocusEvents();\n    return () => {\n      props.pauseOnFocusLoss && unbindFocusEvents();\n    };\n  }, [props.pauseOnFocusLoss]);\n\n  function onDragStart(\n    e: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent<HTMLElement>\n  ) {\n    const toast = toastRef.current!;\n    drag.canCloseOnClick = true;\n    drag.canDrag = true;\n    drag.boundingRect = toast.getBoundingClientRect();\n    toast.style.transition = '';\n    drag.start = drag.x = getX(e.nativeEvent as DragEvent);\n    drag.removalDistance = toast.offsetWidth * (props.draggablePercent / 100);\n  }\n\n  function onDragTransitionEnd() {\n    if (drag.boundingRect) {\n      const { top, bottom, left, right } = drag.boundingRect;\n\n      if (\n        props.pauseOnHover &&\n        drag.x >= left &&\n        drag.x <= right &&\n        drag.y >= top &&\n        drag.y <= bottom\n      ) {\n        pauseToast();\n      } else {\n        playToast();\n      }\n    }\n  }\n\n  function playToast() {\n    setIsRunning(true);\n  }\n\n  function pauseToast() {\n    setIsRunning(false);\n  }\n\n  function bindFocusEvents() {\n    window.addEventListener('focus', playToast);\n    window.addEventListener('blur', pauseToast);\n  }\n\n  function unbindFocusEvents() {\n    window.removeEventListener('focus', playToast);\n    window.removeEventListener('blur', pauseToast);\n  }\n\n  function bindDragEvents() {\n    document.addEventListener('mousemove', onDragMove);\n    document.addEventListener('mouseup', onDragEnd);\n\n    document.addEventListener('touchmove', onDragMove);\n    document.addEventListener('touchend', onDragEnd);\n  }\n\n  function unbindDragEvents() {\n    document.removeEventListener('mousemove', onDragMove);\n    document.removeEventListener('mouseup', onDragEnd);\n\n    document.removeEventListener('touchmove', onDragMove);\n    document.removeEventListener('touchend', onDragEnd);\n  }\n\n  function onDragMove(e: MouseEvent | TouchEvent) {\n    const toast = toastRef.current!;\n\n    if (drag.canDrag) {\n      if (isRunning) pauseToast();\n\n      drag.x = getX(e as DragEvent);\n      drag.deltaX = drag.x - drag.start;\n      drag.y = getY(e as DragEvent);\n\n      // prevent false positif during a toast click\n      if (drag.start !== drag.x) drag.canCloseOnClick = false;\n\n      toast.style.transform = `translateX(${drag.deltaX}px)`;\n      toast.style.opacity = `${1 -\n        Math.abs(drag.deltaX / drag.removalDistance)}`;\n    }\n  }\n\n  function onDragEnd() {\n    const toast = toastRef.current!;\n    if (drag.canDrag) {\n      drag.canDrag = false;\n\n      if (Math.abs(drag.deltaX) > drag.removalDistance) {\n        setPreventExitTransition(true);\n        props.closeToast();\n        return;\n      }\n\n      toast.style.transition = 'transform 0.2s, opacity 0.2s';\n      toast.style.transform = 'translateX(0)';\n      toast.style.opacity = '1';\n    }\n  }\n\n  const eventHandlers: DOMAttributes<HTMLElement> = {\n    onMouseDown: onDragStart,\n    onTouchStart: onDragStart,\n    onMouseUp: onDragTransitionEnd,\n    onTouchEnd: onDragTransitionEnd\n  };\n\n  if (autoClose && pauseOnHover) {\n    eventHandlers.onMouseEnter = pauseToast;\n    eventHandlers.onMouseLeave = playToast;\n  }\n\n  // prevent toast from closing when user drags the toast\n  if (closeOnClick) {\n    eventHandlers.onClick = (e: React.MouseEvent) => {\n      onClick && onClick(e);\n      drag.canCloseOnClick && closeToast();\n    };\n  }\n\n  return {\n    playToast,\n    pauseToast,\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  };\n}\n"],"names":["eventManager","list","Map","emitQueue","on","event","callback","has","this","set","get","push","off","cb","filter","cancelEmit","timers","forEach","timer","clearTimeout","emit","args","setTimeout","_this","isNum","v","isNaN","isBool","isStr","isFn","parseClassName","hasToastId","toastId","canUseDom","window","document","createElement","canBeRendered","content","isValidElement","POSITION","TOP_LEFT","TOP_RIGHT","TOP_CENTER","BOTTOM_LEFT","BOTTOM_RIGHT","BOTTOM_CENTER","TYPE","INFO","SUCCESS","WARNING","ERROR","DEFAULT","DARK","collapseToast","node","done","duration","height","scrollHeight","style","requestAnimationFrame","minHeight","transition","padding","margin","cssTransition","enterDuration","exitDuration","enter","exit","appendPosition","collapse","collapseDuration","Array","isArray","length","children","position","preventExitTransition","props","enterClassName","exitClassName","onExited","nodeRef","current","removeEventListener","React","Transition","timeout","onEnter","classList","add","animationFillMode","animationDuration","onEntered","remove","cssText","onExit","addEventListener","unmountOnExit","CloseButton","closeToast","ariaLabel","className","type","onClick","e","stopPropagation","viewBox","fillRule","d","ProgressBar","delay","isRunning","hide","controlledProgress","progress","rtl","isIn","animationPlayState","opacity","transform","classNames","cx","animationEvent","defaultProps","Toast","useToast","toastRef","eventHandlers","closeButton","autoClose","hideProgressBar","bodyClassName","bodyStyle","progressClassName","progressStyle","updateId","role","deleteToast","cssClasses","appear","id","ref","renderCloseButton","key","Bounce","Slide","Zoom","Flip","ToastPositioner","rest","map","child","ToastContainer","useToastContainer","isToastActive","containerRef","containerId","getToastToRender","toastList","swag","pointerEvents","toastProps","pauseOnHover","pauseOnFocusLoss","closeOnClick","newestOnTop","draggable","draggablePercent","latestInstance","containerDomNode","containerConfig","containers","queue","lazy","isAnyContainerMounted","size","generateToastId","Math","random","toString","Date","now","substr","getToastId","options","dispatchToast","body","appendChild","render","mergeOptions","toast","useKeeper","arg","refresh","useRef","useEffect","reducer","state","action","staleId","forceUpdate","useReducer","x","dispatch","toastCount","collection","instance","toastKey","displayedToast","getToast","indexOf","clearWaitingQueue","limit","enableMultiContainer","removeToast","queueLen","freeSlot","dequeueToast","toDequeue","i","shift","toastContent","appendToast","buildToast","isNotValid","isNotAnUpdate","toastAutoClose","containerAutoClose","toastClassName","toastStyle","removeFromCollection","onOpen","onClose","cloneElement","toastToRender","Object","keys","reverse","p","getX","targetTouches","clientX","useState","setIsRunning","setPreventExitTransition","drag","start","y","deltaX","removalDistance","canCloseOnClick","canDrag","boundingRect","syncProps","onDragStart","getBoundingClientRect","nativeEvent","offsetWidth","onDragTransitionEnd","left","right","top","bottom","pauseToast","playToast","onDragMove","clientY","getY","abs","onDragEnd","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","onMouseEnter","onMouseLeave","success","info","error","warning","dark","warn","dismiss","params","isActive","container","update","oldContent","nextOptions","onChange","configure","config","containerInstance","item","removeChild"],"mappings":"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"}